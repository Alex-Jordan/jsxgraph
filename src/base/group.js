/*
    Copyright 2008-2013
        Matthias Ehmann,
        Michael Gerhaeuser,
        Carsten Miller,
        Bianca Valentin,
        Alfred Wassermann,
        Peter Wilfahrt

    This file is part of JSXGraph.

    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.

    You can redistribute it and/or modify it under the terms of the

      * GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version
      OR
      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT

    JSXGraph is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License and
    the MIT License along with JSXGraph. If not, see <http://www.gnu.org/licenses/>
    and <http://opensource.org/licenses/MIT/>.
 */


/*global JXG: true, define: true*/
/*jslint nomen: true, plusplus: true*/

/* depends:
 jxg
 base/constants
 utils/type
 */

/**
 * @fileoverview In this file the class Group is defined, a class for
 * managing grouping of points.
 */

define([
    'jxg', 'base/constants', 'base/element', 'math/math', 'math/geometry', 'utils/type'
], function (JXG, Const, GeometryElement, Mat, Geometry, Type) {

    "use strict";

    /**
     * Creates a new instance of Group.
     * @class In this class all group management is done.
     * @param {JXG.Board} board
     * @param {String} id Unique identifier for this object.  If null or an empty string is given,
     * an unique id will be generated by Board
     * @param {String} name Not necessarily unique name, displayed on the board.  If null or an
     * empty string is given, an unique name will be generated.
     * @param {Array} objects Array of points to add to this group.
     * @param {Object} attributes Defines the visual appearance of the group.
     * @constructor
     */
    JXG.Group = function (board, id, name, objects, attributes) {
        var number, objArray, i, obj, att;

        this.board = board;
        this.objects = {};
        number = this.board.numObjects;
        this.board.numObjects += 1;

        if ((id === '') || !Type.exists(id)) {
            this.id = this.board.id + 'Group' + number;
        } else {
            this.id = id;
        }
        this.board.groups[this.id] = this;

        this.type = Const.OBJECT_TYPE_POINT;
        this.elementClass = Const.OBJECT_CLASS_POINT;

        if ((name === '') || !Type.exists(name)) {
            this.name = 'group_' + this.board.generateName(this);
        } else {
            this.name = name;
        }
        delete this.type;

        this.coords = {};

        this.needsRegularUpdate = attributes['needsregularupdate']; 
        
        this.rotationCenter = null;
        this.rotationPoints = [];
                
        if (Type.isArray(objects)) {
            objArray = objects;
        } else {
            objArray = Array.prototype.slice.call(arguments, 3);
        }

        for (i = 0; i < objArray.length; i++) {
            obj = this.board.select(objArray[i]);

            if ((!obj.visProp.fixed) && Type.exists(obj.coords) && Type.exists(obj.group)) {
                if (obj.group.length !== 0) {
                    this.addGroup(obj.group[obj.group.length - 1]);
                } else {
                    this.addPoint(obj);
                }
            }
        }

        this.methodMap = {
            ungroup: 'ungroup',
            add: 'addPoint',
            addPoint: 'addPoint',
            addPoints: 'addPoints',
            addGroup: 'addGroup',
            remove: 'removePoint',
            removePoint: 'removePoint',
            setAttribute: 'setAttribute',
            setProperty: 'setAttribute'
        };
    };

    JXG.extend(JXG.Group.prototype, /** @lends JXG.Group.prototype */ {
        /**
         * Releases the group added to the points in this group, but only if this group is the last group.
         * @returns {JXG.Group} returns this group
         */
        ungroup: function () {
            var el;

            for (el in this.objects) {
                if (this.objects.hasOwnProperty(el)) {
                    if (Type.isArray(this.objects[el].point.group) &&
                            this.objects[el].point.group[this.objects[el].point.group.length - 1] === this) {
                        this.objects[el].point.group.pop();
                    }

                    this.removePoint(this.objects[el].point);
                }
            }
            
            return this;
        },

        /**
         * Sends an update to all group members. This method is called from the points' coords object event listeners
         * and not by the board.
         * @param{JXG.GeometryElement} drag Element that caused the update.
         * @returns {JXG.Group} returns this group
         */
        update: function (drag) {
            var el, 
                dragObjId, 
                isTranslation = false,
                isRotation = false,
                trans, 
                alpha, t, center, len, 
                obj = null;

            if (!this.needsUpdate) {
                return this;
            }

            for (el in this.objects) {
                if (this.objects.hasOwnProperty(el)) {
                    obj = this.objects[el].point;
                    
                    if (obj.coords.distance(Const.COORDS_BY_USER, this.coords[el]) > Mat.eps) {
                        if (Type.isInArray(this.rotationPoints, obj)) {
                            isRotation = true;
                        } else {
                            isTranslation = true;
                            trans = [
                                obj.coords.usrCoords[1] - this.coords[obj.id].usrCoords[1],
                                obj.coords.usrCoords[2] - this.coords[obj.id].usrCoords[2]
                            ];
                        }
                        dragObjId = obj.id;
                        break;
                    }
                }
            }

            if (!isRotation && !isTranslation) {
                return this;
            }
            
            // Prepare translation or rotation
            if (isTranslation) {
                obj = this.objects[dragObjId].point;
                trans = [
                        obj.coords.usrCoords[1] - this.coords[dragObjId].usrCoords[1],
                        obj.coords.usrCoords[2] - this.coords[dragObjId].usrCoords[2]
                    ];
            } else if (isRotation) {
                if (Type.isPoint(this.rotationCenter)) {
                    center = this.rotationCenter.coords.usrCoords.slice(1);
                } else if (this.rotationCenter === 'centroid') {
                    center = [0, 0];
                    len = 0;
                    for (el in this.coords) if (this.coords.hasOwnProperty(el)) {
                        center[0] += this.coords[el].usrCoords[1];
                        center[1] += this.coords[el].usrCoords[2];
                        ++len;
                    }
                    if (len > 0) {
                        center[0] /= len;
                        center[1] /= len;
                    }
                }
                
                alpha = Geometry.rad(this.coords[dragObjId].usrCoords.slice(1), center, this.objects[dragObjId].point);
                
                t = this.board.create('transform', [alpha, center[0], center[1]], {type: 'rotate'});
            }
            
            // Do the transformation
            for (el in this.objects) if (this.objects.hasOwnProperty(el)) {
                if (Type.exists(this.board.objects[el])) {
                    obj = this.objects[el].point;
                    
                    if (obj.id !== dragObjId) {
                        if (isTranslation) {
                            obj.setPositionDirectly(Const.COORDS_BY_USER, 
                                [this.coords[el].usrCoords[1] + trans[0], 
                                 this.coords[el].usrCoords[2] + trans[1]]);
                        } else if (isRotation) {
                            t.applyOnce([obj]);
                        }
                    } else {
                        if (isRotation) {
                            obj.setPositionDirectly(Const.COORDS_BY_USER, Mat.matVecMult(t.matrix, this.coords[obj.id].usrCoords));
                        }
                    }

                    this.coords[obj.id] = {usrCoords: obj.coords.usrCoords.slice(0)};
                } else {
                    delete this.objects[el];
                }
            }

            // Prepare dependent objects for update
            for (el in this.objects) if (this.objects.hasOwnProperty(el)) {
                for (desc in this.objects[el].descendants) {
                    if (this.objects[el].descendants.hasOwnProperty(desc)) {
                        this.objects[el].descendants.needsUpdate = this.objects[el].descendants.needsRegularUpdate || this.board.needsFullUpdate;
                    }
                }
            }
            this.board.updateElements(drag);

            return this;
        },

        /**
         * Adds an Point to this group.
         * @param {JXG.Point} object The point added to the group.
         * @returns {JXG.Group} returns this group
         */
        addPoint: function (object) {
            this.objects[object.id] = {
                point: object
            };
            this.coords[object.id] = {usrCoords: object.coords.usrCoords.slice(0) }; 
            
            return this;
        },

        /**
         * Adds multiple points to this group.
         * @param {Array} objects An array of points to add to the group.
         * @returns {JXG.Group} returns this group
         */
        addPoints: function (objects) {
            var p;

            for (p = 0; p < objects.length; p++) {
                this.addPoint(objects[p]);
            }
            
            return this;
        },

        /**
         * Sets the center of rotation for the group. This is either a point or the centroid of the group.
         * @param {JXG.Point|String} object A point which will be the center of rotation or the string "centroid"
         * @returns {JXG.Group} returns this group
         */
        setRotationCenter: function(object) {
            this.rotationCenter = object;
            
            return this;
        },

        /**
         * Sets the rotation points of the group. Dragging at one of these points results into a rotation of the whol group around
         * the rotation center of the group {@see JXG.Group#setRotationCenter}.
         * @param {Array|JXG.Point} objects Array of {@link JXG.Point} or arbitrary number of {@link JXG.Point} elements.
         * @returns {JXG.Group} returns this group
         */
        setRotationPoints: function(objects) {
            var objs, i, len;
            if (Type.isArray(objects)) {
                objs = objects;
            } else {
                objs = arguments;
            }
                
            len = objs.length;
            this.rotationPoints = [];
            for (i = 0; i < len; ++i) {
                this.rotationPoints.push(objs[i]);
            }
            
            return this;
        },
        
        /**
         * Adds all points in a group to this group.
         * @param {JXG.Group} group The group added to this group.
         * @returns {JXG.Group} returns this group
         */
        addGroup: function (group) {
            var el;

            for (el in group.objects) {
                if (group.objects.hasOwnProperty(el)) {
                    this.addPoint(group.objects[el].point);
                }
            }
            
            return this;
        },

        /**
         * Removes a point from the group.
         * @param {JXG.Point} point
         * @returns {JXG.Group} returns this group
         */
        removePoint: function (point) {
            delete this.objects[point.id];

            return this;
        },

        /**
         * @deprecated
         * Use setAttribute
         */
        setProperty: JXG.shortcut(JXG.Group.prototype, 'setAttribute'),

        setAttribute: function () {
            var el;

            for (el in this.objects) {
                if (this.objects.hasOwnProperty(el)) {
                    this.objects[el].point.setAttribute.apply(this.objects[el].point, arguments);
                }
            }
            
            return this;
        }
    });

    /**
     * Groups points.
     * @param {JXG.Board} board The board the points are on.
     * @param {Array} parents Array of points to group.
     * @param {Object} attributes Visual properties.
     * @returns {JXG.Group}
     */
    JXG.createGroup = function (board, parents, attributes) {
        var i, 
            attr = Type.copyAttributes(attributes, board.options, 'group');
            g = new JXG.Group(board, attr.id, attr.name, parents, attr);

        g.elType = 'group';
        g.parents = [];

        for (i = 0; i < parents.length; i++) {
            g.parents.push(parents[i].id);
        }

        return g;
    };

    JXG.registerElement('group', JXG.createGroup);

    return {
        Group: JXG.Group,
        createGroup: JXG.createGroup
    };
});
